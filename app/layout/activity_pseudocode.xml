<?xml version="1.0" encoding="utf-8"?>
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:background="@drawable/fondo_degradado"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    tools:context=".Pseudocode">
    <android.support.v7.widget.CardView
        xmlns:card_view="http://schemas.android.com/apk/res-auto"
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_gravity="center"
        card_view:cardCornerRadius="4dp"
        card_view:cardBackgroundColor="@android:color/transparent"
        card_view:cardUseCompatPadding="true"
        >
        <ScrollView
            android:layout_width="match_parent"
            android:layout_height="match_parent"
            android:layout_marginTop="10dp">
            <LinearLayout
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:orientation="vertical">
                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="Pseudocodigo"
                    android:textAlignment="center"
                    android:textSize="18dp"
                    android:textColor="@color/colorPrimaryDark"
                    android:layout_gravity="center"/>
                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:text="Es un pseudolenguaje intermedio entre el natural del programador y el lenguaje de programación seleccionado, considerándose por tanto un lenguaje de pseudoprogramación.
No existe una sintaxis estándar para el pseudocódigo, utilizando una mezcla de lenguaje natural y una serie de símbolos, términos y otras características propias de los lenguajes de programación de alto nivel.
\nSus principales características son:
•	Es fácil de aprender y utilizar.
•	Es conciso.
•	Es independiente del lenguaje de programación que se vaya a utilizar.
•	Facilita el paso del programa al lenguaje de programación.
•	Es fácil de mantener. \n
Sus principales ventajas sobre las técnicas diagramáticas que veremos a continuación son su facilidad de creación, evolución y mantenimiento, y la facilidad para expresar el pseudocódigo en cualquier lenguaje de programación.
Sus mayores inconvenientes son su falta de estandarización y la dificultad para su lectura cuando su tamaño crece.
\n Las palabras, símbolos y operadores más utilizados en pseudocódigo son los siguientes:"
                    android:textSize="15dp"
                    android:textColor="@color/colorPrimaryDark"
                    android:layout_gravity="center"/>
                <ImageView
                    android:src="@drawable/pseudocodigo"
                    android:textAlignment="center"
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    />
                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="14dp"
                    android:textColor="@color/colorPrimaryDark"
                    android:layout_gravity="center"
                    android:text="FASES PARA LA CREACIÓN DE UN PROGRAMA"/>
                <TextView
                    android:layout_width="match_parent"
                    android:layout_height="wrap_content"
                    android:textSize="18dp"
                    android:textColor="@color/colorPrimaryDark"
                    android:layout_gravity="center"
                    android:text="1. Análisis del problema: en esta fase debemos especificar cuáles son los requisitos a los que se debe dar solución desde el programa a realizar.
2.	Diseño y verificación del algoritmo: nos conduce a un diseño escrito y detallado del algoritmo que solucionarán el problema al que nos enfrentamos.
3.	Codificación: donde implementaremos el diseño en el lenguaje de programación elegido.
4.	Compilación y enlazado : donde se traduce el código fuente escrito a código máquina mediante el empleo de compiladores y generándose el programa ejecutable por el ordenador.
5.	Verificación y depuración: donde se buscan errores producidos en las fases anteriores y se eliminan.
6.	Documentación: donde se creará la documentación del programa realizado, tanto técnica como a nivel de usuario (manuales).
"/><Button
                android:layout_width="match_parent"
                android:layout_height="wrap_content"
                android:textAlignment="center"
                android:id="@+id/btn_pseudocodigo"
                android:layout_gravity="center"
                android:background="@android:color/transparent"
                />
            </LinearLayout>

        </ScrollView>
    </android.support.v7.widget.CardView>

</android.support.constraint.ConstraintLayout>